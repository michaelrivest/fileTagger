#! /usr/local/bin/node
const fs = require('fs');
const path = require('path');
const config = require('./config');
const store = require('./fStore');
const U = require('./util');

let args = [
    { arg: '-t', name: 'tags', type: 'array' },
    { arg: '-d', name: 'deleteMode', type: 'boolean' },
    { arg: '-r', name: 'read', type: 'boolean' },
    { arg: '-q', name: 'quiet', type: 'boolean' },
    { arg: '-v', name: 'verbose', type: 'boolean' },
]

let argv = require('./argParse')(args, process.argv);

const logPriority = argv.verbose ? 2 : argv.quiet ? 0 : 1;

const getFileCategory = (fileName) => U.findKeyIncluding(config.fileTypes, U.standardExt(fileName));

const getFileNames = (files, dirName) => files.map(file => path.join(dirName, file));

const dirFileNames = (dir) => getFileNames(fs.readdirSync(dir), dir);

const getDirFiles = (files) => files.reduce((all, file) => { 
    return file.type == 'dir' ? all.concat(getDirFiles(file.files)) : all.concat([file]) }, []);

const tagDeleter = (tags) => (file) => tags.forEach((tag) => file.tags.includes(tag) ? file.tags.splice(file.tags.indexOf(tag), 1) : null);

const tagAdder = (tags) => (file) => tags.forEach(tag => file.tags.includes(tag) ? null : file.tags.push(tag));

const readTags = (file) => argv.read ? log(0, `${path.basename(file.path)} Tags: ${file.tags.join(', ')}`) : null;


function exitMessage (msg) { 
    log(1, msg); 
    if (logPriority == 2) console.timeEnd("ftag"); 
    process.exit(1);
}

function log(priority, ...expressions) {
    if (priority > logPriority) return false;
    expressions.forEach(expr => console.log(expr));
}

function createFileRecord(fileData) {
    let fileCat = getFileCategory(fileData.path);
    if (!fileCat) {
        log(2, "Unrecognized Extension for " + fileData.path)
        return null;
    } else {
 let fileRecord = Object.assign({ category: fileCat, tags: [] }, fileData);
    log(2, "Creating New Entry for " + fileRecord.path)
    store.addToStore(fileRecord);
    return fileRecord;
    }
   }


function getFileData(files) {
    return files.map((file) => {
        let stats;
        try {
            stats = fs.statSync(file);
        } catch(e) {
            exitMessage("File Not Found: " + file)
        }

        if (stats.isFile(file)) return { path: file, type: "file" };
        else if (stats.isDirectory(file)) {
            return { name: file, type: 'dir', files: getFileData(dirFileNames(file)) };
        }
    })
}

function getFileRecords(files) {
    let filesOnly = getDirFiles(files).filter(f => f.type == 'file')
    log(2, "Files: " + filesOnly.map(f => path.basename(f.path)).join('\n'))
    return filesOnly.map((file) => {
        let existing = store.searchStore({ path: file.path })
        if (existing) log(2, "Updating File: " + existing[0].path)
        return existing ? existing[0] : createFileRecord(file);
    }).filter(f => f);
}

function setTags(tags, files) {
    let allFiles = getFileRecords(files);
    log(1, "Setting Tags: " + tags.join(', ') + " To " + allFiles.length + " Files.")

    let addTags = tagAdder(tags);
    allFiles.forEach(U.perform(addTags, readTags));
}


function remTags(tags, files) {
    let allFiles = getFileRecords(files);
    log(1, "Deleting Tags: " + tags.join(', ') + " To " + allFiles.length + " Files.");
    let deleteTags = tagDeleter(tags);
    allFiles.forEach(U.perform(deleteTags, readTags));
}


function validateArgs() {
    if (process.stdin.isTTY) {
    if (!argv._ || argv._.length < 1) exitMessage("No files Specified - Enter file / directories before other options.");
    else if (!argv.tags || argv.tags.length < 1) exitMessage("Specify tags to apply with -t");
    } else {
        if ((!argv.tags || argv.tags.length < 1 ) && ( !argv._ || argv._.length < 1)) exitMessage("Specify tags to apply with -t");
    }
}

function getFilesFromStdin(cb) {
        process.stdin.setEncoding('utf8');
        let fArr = [];
        process.stdin.on('readable', () => {
            let chunk;
            while (chunk = process.stdin.read()) fArr = fArr.concat(chunk.split('\n'));
        });
        process.stdin.on('end', () => {
            fArr = fArr.filter(f => f);
            let files = getFileData(getFileNames(fArr, process.cwd()));
            cb(files)
        });
}

function getFiles(cb) {
    if (process.stdin.isTTY) {
        let files = getFileData(getFileNames(argv._, process.cwd()));
        cb(files);
    } else {
        getFilesFromStdin(cb);
    }

}

function getTags() {
    if (process.stdin.isTTY) {
        return argv.tags;
    } else {
        return argv.tags ? argv.tags : argv._; 
    }
}

function main() {
    console.time("ftag");

    validateArgs();

    let tags = getTags();
    
    getFiles((files) => {
         if (argv.deleteMode) remTags(tags, files);
        else setTags(tags, files);

    store.saveStore((err, saved) => {
        if (err) exitMessage(err); 
        else exitMessage(`Saved ${files.length} files`);
    });

})

}

main();


