#! /usr/local/bin/node
let path = require('path');
let childProcess = require('child_process');
let relPath = require('./relPath');
let store = require('./fStore');
let config = require('./config');
let U = require('./util');

let args = [
    { arg: '-a', name: 'andTags', type: 'array' },
    { arg: '-c', name: 'category', type: 'array' },
    { arg: '-o', name: 'orTags', type: 'array' },
    { arg: '-r', name: 'read', type: 'boolean' },
    { arg: '-n', name: 'name', type: 'string' },
    { arg: '-l', name: 'limit', type: 'number', default: 1 },
    { arg: '-i', name: 'info', type: 'boolean' },
    { arg: '-f', name: 'fullPath', type: 'boolean' },
    { arg: '-x', name: 'exec', type: 'boolean' },
]

let query = require('./argParse')(args, process.argv);

let closers = ['close', 'exit', 'done', 'bye']

let editorFiles = ['.txt', '.js', '.c', '.cpp']

const isExit = (input) => (closers.includes(input.trim().toLowerCase())) 

const logMatches = (matches) => matches.forEach(logMatch)

const inputValidator = (matches) => (input) => (!isNaN(parseInt(input)) && parseInt(input) <= matches.length && parseInt(input) > 0)

var execListener;
function createExecListener (matches) {
    let inputValid = inputValidator(matches);
    return function () {
        const chunk = process.stdin.read();
        if (chunk !== null) {
            if (isExit(chunk)) process.exit(1);
            else if (inputValid(chunk)) {
                let fileIndex = parseInt(chunk) - 1;
                let file = matches[fileIndex];
                console.log("Opening " + file.path)
                execOpen(file);
            } else execMode(matches);
        }
    }
}

function logMatch(match, i) {
    let name = query.fullPath ? match.path : relPath(match.path);
    if (!query.read) console.log(`${i + 1}:  ${path.basename(name)}`)
    else console.log(name);

    if (query.info) console.log(`(${match.category || ""}) [${match.tags.join(', ')}] `)
}

function execMode(matches) {
    execListener = createExecListener(matches);
    console.log("Enter a number to open a file, type 'exit' to quit.")
    logMatches(matches);

    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', execListener );

    process.stdin.on('end', () => {
        process.stdout.write('end');
    });
}


function findDefaultProgram (file) {
    let dProgs = config.defaultPrograms;

    let filters = { 
        category: file.category, 
        extension: U.standardExt(file.path),
        name: file.path 
    }

    return dProgs.reduce((acc, prog) => {
        for (let criteria in prog.opens) {
            if (prog.opens[criteria].includes(filters[criteria])) return prog; 
        }

        if (!acc && prog.options.fallback) return prog;
        else return acc;
    }, null) 
}

function editorOpen(editor, file) {
    let editorArgs = editor.split(' ');
    process.stdin.removeListener('readable', execListener);
    let editorProc = childProcess.spawn(editorArgs[0], [...editorArgs.slice(1,), `"${file.path}"`], {shell: true, stdio: ['inherit', 'inherit', 'inherit' ] }) 
    editorProc.on('close', function (e, code) {
         main()  
    });

}

function execOpen(file) {
    const execCB = (e, sout, serr) => {
         if (e) console.error(`exec error: ${e}`);
    }

    let dProgram = findDefaultProgram(file);
    if (dProgram) {
        if (dProgram.options.editor) {
            editorOpen(dProgram.command, file);
        } else {
            childProcess.exec(`${dProgram.command} "${file.path}"`, execCB)
        }
    } else {
        console.log(`No default program found - edit your defaults in ${__dirname}/config.json`);
        editorOpen(process.env.EDITOR, file);
    }
}

function main() {
    if (!query.andTags && !query.orTags) query.andTags = query._;
    let matches = store.searchStore(query);

    if (matches) {
        if (!query.default.limit) matches = matches.slice(0, query.limit);

        if (query.read) logMatches(matches)
        else execMode(matches);
    }
}

main()
